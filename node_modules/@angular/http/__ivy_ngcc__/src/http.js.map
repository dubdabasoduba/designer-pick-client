{"version":3,"file":"http.js","sources":["../../../../modules/@angular/http/src/http.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs, method: RequestMethod,\n    url: string): RequestOptions {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n\n  return newOptions.merge(new RequestOptions({method, url}));\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import 'rxjs/add/operator/map'\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @experimental\n */\n\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\n\n/**\n * @experimental\n */\n\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}